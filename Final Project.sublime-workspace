{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"rescueTime"
			],
			[
				"tro",
				"troubleX"
			],
			[
				"are",
				"areaTri"
			],
			[
				"per",
				"perimTri"
			],
			[
				"n",
				"nNxtButtonPressed"
			],
			[
				"speed",
				"encSpeed"
			],
			[
				"stop",
				"stopOnColorEncoder"
			],
			[
				"star",
				"startLengths"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"NXT_FileIO.c\"\n\n#define CHORD_MOTOR motorA\n#define STRUM_MOTOR motorB\n#define PULL_MOTOR motorC\n\n#define STRUM_RANGE 45\n#define PULL_RANGE 60\n\ntypedef struct{\n	int chordData;\n	int strumData;\n} SongFrame;\n\nvoid Callibrate(){\n	//TODO: Calibrate by using sensors\n	motor[PULL_MOTOR] = -30;\n	wait1Msec(600);\n	motor[PULL_MOTOR] = 0;\n\n\n	motor[STRUM_MOTOR] = -50;--\n	motor[STRUM_MOTOR] = 0;\n	nMotorEncoder[PULL_MOTOR] = 0;\n	nMotorEncoder[STRUM_MOTOR] = 0;\n}\n\nbool GetSongFrame(TFileHandle fin, SongFrame &frame){\n	bool read = true;\n	read &= readIntPC(fin, frame.chordData);\n	read &= readIntPC(fin, frame.strumData);\n	return read;\n}\n\nvoid Turn90Degrees(int direction, int speed){\n	nMotorEncoder[CHORD_MOTOR] = 0;\n	motor[CHORD_MOTOR] = speed * direction;\n	while(nMotorEncoder[CHORD_MOTOR] < 90 * direction){}\n	motor[CHORD_MOTOR] = 0;\n}\n\nvoid Turn180Degrees(int speed){\n	nMotorEncoder[CHORD_MOTOR] = 0;\n	motor[CHORD_MOTOR] = speed;\n	while(nMotorEncoder[CHORD_MOTOR] < 180){}\n	motor[CHORD_MOTOR] = 0;\n}\n\nvoid HoldChord(int chordData, int lastChordData){\n	int modChord = (chordData - lastChordData) % 4 - 2;\n	if(modChord == -1 || modChord == 1){\n		Turn90Degrees(modChord, 100);\n	}\n	else if(modChord == 0){\n		Turn180Degrees(100);\n	}\n}\n\nvoid Strum(int speed){\n	nMotorEncoder[STRUM_MOTOR] = 0;\n	motor[STRUM_MOTOR] = speed;\n	while(nMotorEncoder[STRUM_MOTOR] < STRUM_RANGE){}\n	motor[STRUM_MOTOR] = 0;\n	nMotorEncoder[PULL_MOTOR] = 0;\n	motor[PULL_MOTOR] = 100;\n	while(nMotorEncoder[PULL_MOTOR] < PULL_RANGE){}\n	motor[PULL_MOTOR] = 0;\n	nMotorEncoder[STRUM_MOTOR] = 0;\n	motor[STRUM_MOTOR] = -100;\n	while(nMotorEncoder[STRUM_MOTOR] > 0){}\n	motor[STRUM_MOTOR] = 0;\n	nMotorEncoder[PULL_MOTOR] = 0;\n	motor[PULL_MOTOR] = 100;\n	while(nMotorEncoder[PULL_MOTOR] > 0){}\n	motor[PULL_MOTOR] = 0;\n}\n\nvoid ProcessTime(float lastTime, float targetMSPerFrame){\n	float elapsedMS = time1[T1] - lastTime;\n	if(elapsedMS < targetMSPerFrame) {\n		wait1Msec(targetMSPerFrame - elapsedMS);\n		float testElapsedMS = time1[T1] - lastTime;\n\n		if(testElapsedMS > targetMSPerFrame) {\n			//nxtDisplayString(0, \"Long Wait\");\n		} else {\n			do {\n				elapsedMS = time1[T1] - lastTime;\n			} while(elapsedMS <= targetMSPerFrame);\n		}\n\n	} else {\n		nxtDisplayString(0, \"Missed Frame\");\n	}\n}\n\ntask main(){\n	Callibrate();\n\n	TFileHandle fin;\n	if(openReadPC(fin, \"songData.txt\")){\n\n		int tempo;\n		SongFrame frame;\n		SongFrame lastFrame;\n		readIntPC(fin, tempo);\n\n		float targetMSPerFrame = 60000.0 / tempo;\n		time1[T1] = 0;\n		float lastTime = time1[T1];\n		while(GetSongFrame(fin, frame)){\n			//Process Input\n			HoldChord(frame.chordData, lastFrame.chordData);\n\n			Strum(frame.strumData);\n\n			//Time Processing\n			ProcessTime(lastTime, targetMSPerFrame);\n\n			lastFrame = frame;\n\n			float endTime = time1[T1];\n			float frameTimeMS = endTime - lastTime;\n			lastTime = endTime;\n			float hz = 1000.0 / frameTimeMS;\n\n			//Frame logging\n			nxtDisplayString(1, \"%.02fms/f (%.02fHz)\",\n							 frameTimeMS, hz);\n		}\n\n	}else{\n		nxtDisplayString(0, \"Failure\");\n	}\n\n}\n",
			"file": "source.cpp",
			"file_size": 3135,
			"file_write_time": 131243494333191852,
			"settings":
			{
				"buffer_size": 2999,
				"line_ending": "Windows"
			}
		},
		{
			"file": "NXT_FileIO.c",
			"settings":
			{
				"buffer_size": 1874,
				"line_ending": "Windows"
			}
		},
		{
			"file": "PC_FileIO.c",
			"settings":
			{
				"buffer_size": 9547,
				"line_ending": "Windows"
			}
		},
		{
			"file": "songData.txt",
			"settings":
			{
				"buffer_size": 572,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/Ge121 Assignment 8.sublime-build",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
		],
		"width": 386.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Zaeem Mohamed/Downloads/GENE121_MTE100FuelCellCarProject/GENE121_MTE100FuelCellCarProject/UW_GENE_121.h",
		"/C/Users/Zaeem Mohamed/AppData/Roaming/Sublime Text 2/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Zaeem Mohamed/AppData/Roaming/Sublime Text 2/Packages/Default/Default (Windows).sublime-keymap",
		"/Z/C++ Repositories/AI_Project/src/_zm_typedefs.h",
		"/C/Nova Drivu/C++ Repositories/AI_Project/source.cpp",
		"/C/Users/Zaeem Mohamed/AppData/Roaming/Sublime Text 2/Packages/User/Ge121 Assignment 6.sublime-build",
		"/C/Nova Drivu/C++ Repositories/Ge121/Assignment 6/A6Q2.cpp",
		"/C/Nova Drivu/C++ Repositories/Ge121/Assignment 6/Build.bat",
		"/C/Nova Drivu/C++ Repositories/TRON Days/Build.bat",
		"/C/Users/Zaeem Mohamed/AppData/Roaming/Sublime Text 2/Packages/User/TRON_Days.sublime-build",
		"/Z/C++ Repositories/TRON Days/Bond.cpp"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 95.0,
		"where_history":
		[
			"",
			"A5Q2.cpp"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"NXTDisplayString",
			"\"||\""
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"nxtDisplayString",
			"setw(10)"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source.cpp",
					"settings":
					{
						"buffer_size": 2999,
						"regions":
						{
						},
						"selection":
						[
							[
								366,
								366
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 399.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "NXT_FileIO.c",
					"settings":
					{
						"buffer_size": 1874,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "PC_FileIO.c",
					"settings":
					{
						"buffer_size": 9547,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "songData.txt",
					"settings":
					{
						"buffer_size": 572,
						"regions":
						{
						},
						"selection":
						[
							[
								97,
								97
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 132.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"/C/Nova Drivu/C++ Repositories/Ge121/Assignment 8/A8Q2.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Nova Drivu/C++ Repositories/AI_Project/AI_Project.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
